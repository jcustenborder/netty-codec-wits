/**
 * Copyright Â© 2019 Jeremy Custenborder (jcustenborder@gmail.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.github.jcustenborder.netty.wits;

import io.netty.buffer.ByteBuf;
import io.netty.buffer.ByteBufUtil;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class WITSPacketDecoderTest {
  WITSPacketDecoder decoder;

  @BeforeEach
  public void before() {
    this.decoder = new WITSPacketDecoder();
  }

  @Test
  public void byteBuf() {
    final String expected = "303130353139303632350d0a303130363139323134370d0a313938344572646f73204d696c6c65720d0a3031323038370d0a303132333131360d0a3031323438310d0a30313231313331322e38350d0a3031313232372e36350d0a303130383336332e34330d0a303131303336332e34330d0a3031313434342e30350d0a3031313534342e30350d0a30313136352e36380d0a30313137352e36380d0a3031313332392e35320d0a30313431302e3030303030300d0a30313432302e3030303030300d0a30313433302e3030303030300d0a30313434302e3030303030300d0a30313435302e3030303030300d0a";
    ByteBuf buf = TestUtils.byteBuf(expected);
    final String actual = ByteBufUtil.hexDump(buf);
    assertEquals(expected, actual);
  }

  @Test
  public void single() throws Exception {
    final String input = "26260d0a303130353139303632350d0a303130363139323134370d0a313938344572646f73204d696c6c65720d0a3031323038370d0a303132333131360d0a3031323438310d0a30313231313331322e38350d0a3031313232372e36350d0a303130383336332e34330d0a303131303336332e34330d0a3031313434342e30350d0a3031313534342e30350d0a30313136352e36380d0a30313137352e36380d0a3031313332392e35320d0a30313431302e3030303030300d0a30313432302e3030303030300d0a30313433302e3030303030300d0a30313434302e3030303030300d0a30313435302e3030303030300d0a21210d0a";
    ByteBuf buf = TestUtils.byteBuf(input);
    List<Object> expected = Arrays.asList(
        TestUtils.byteBuf("303130353139303632350d0a303130363139323134370d0a313938344572646f73204d696c6c65720d0a3031323038370d0a303132333131360d0a3031323438310d0a30313231313331322e38350d0a3031313232372e36350d0a303130383336332e34330d0a303131303336332e34330d0a3031313434342e30350d0a3031313534342e30350d0a30313136352e36380d0a30313137352e36380d0a3031313332392e35320d0a30313431302e3030303030300d0a30313432302e3030303030300d0a30313433302e3030303030300d0a30313434302e3030303030300d0a30313435302e3030303030300d0a")
    );
    List<Object> actual = new ArrayList<>();
    this.decoder.decode(null, buf, actual);
    assertEquals(expected, actual);
  }

//  @Test
  public void multiple() throws Exception {
    final String input = "26260d0a303130353139303632350d0a303130363139323134370d0a313938344572646f73204d696c6c65720d0a3031323038370d0a303132333131360d0a3031323438310d0a30313231313331322e38350d0a3031313232372e36350d0a303130383336332e34330d0a303131303336332e34330d0a3031313434342e30350d0a3031313534342e30350d0a30313136352e36380d0a30313137352e36380d0a3031313332392e35320d0a30313431302e3030303030300d0a30313432302e3030303030300d0a30313433302e3030303030300d0a30313434302e3030303030300d0a30313435302e3030303030300d0a21210d0a26260d0a303130353139303632350d0a303130363139323134390d0a313938344572646f73204d696c6c65720d0a3031323039300d0a303132333131360d0a3031323438360d0a30313231313334332e39370d0a3031313232372e30350d0a303130383336342e30330d0a303131303336342e30330d0a3031313434342e30350d0a3031313534342e30350d0a30313136352e36380d0a30313137352e36380d0a3031313332392e35320d0a30313431302e3030303030300d0a30313432302e3030303030300d0a30313433302e3030303030300d0a30313434302e3030303030300d0a30313435302e3030303030300d0a21210d0a";
    ByteBuf buf = TestUtils.byteBuf(input);
    List<Object> expected = Arrays.asList(
        TestUtils.byteBuf("303130353139303632350d0a303130363139323134370d0a313938344572646f73204d696c6c65720d0a3031323038370d0a303132333131360d0a3031323438310d0a30313231313331322e38350d0a3031313232372e36350d0a303130383336332e34330d0a303131303336332e34330d0a3031313434342e30350d0a3031313534342e30350d0a30313136352e36380d0a30313137352e36380d0a3031313332392e35320d0a30313431302e3030303030300d0a30313432302e3030303030300d0a30313433302e3030303030300d0a30313434302e3030303030300d0a30313435302e3030303030300d0a"),
        TestUtils.byteBuf("303130353139303632350d0a303130363139323134390d0a313938344572646f73204d696c6c65720d0a3031323039300d0a303132333131360d0a3031323438360d0a30313231313334332e39370d0a3031313232372e30350d0a303130383336342e30330d0a303131303336342e30330d0a3031313434342e30350d0a3031313534342e30350d0a30313136352e36380d0a30313137352e36380d0a3031313332392e35320d0a30313431302e3030303030300d0a30313432302e3030303030300d0a30313433302e3030303030300d0a30313434302e3030303030300d0a30313435302e3030303030300d0a")
    );
    List<Object> actual = new ArrayList<>();
    this.decoder.decode(null, buf, actual);
    assertEquals(expected, actual);
  }

}
